---
description: 
globs: 
alwaysApply: false
---
---
description: TypeScriptコーディング規約と命名規則
globs: "**/*.{ts,tsx}"
alwaysApply: true
---

# コーディング規約

## 基本方針

- TypeScriptの型安全性を最大限に活用する
- 可読性とメンテナンス性を重視する
- 一貫性のある命名と構造を守る
- `any`型の使用を避ける
- 型アサーション（`as string`など）は必要最小限にする

## ファイル構成

- 1ファイルにつき1つの主要な機能/コンポーネントを定義する
- 関連するユーティリティは別ファイル（例: `internal.ts`）に分離する
- APIルートファイルは`route.ts`という名前で作成する（Next.js App Routerの規約）
- テストファイルは`tests/`ディレクトリに配置し、`*.test.ts`という命名規則に従う

## 命名規則

### 変数・関数

- **キャメルケース**を使用: `getUserData`, `postItem`, `filteredResults`
- 論理値を扱う変数や関数は「is」「has」「can」などのプレフィックスを使用: `isZero`, `hasPermission`
- 動詞で始める関数名: `getFieldIfPrefixMatches`, `filterDataBySearchParams`

### 型定義

- **パスカルケース**を使用: `Post`, `Comment`, `ObjectHasId`
- インターフェースやタイプエイリアスは明確な名前をつける
- ジェネリック型パラメータも意味のある名前（単一文字を避ける）

### ファイル名

- **キャメルケース**または**ケバブケース**を使用
- コンポーネント: `TodoList.tsx`, `UserProfile.tsx`
- ユーティリティ: `internal.ts`, `helpers.ts`
- APIルート: `route.ts`
- テスト: `get.test.ts`, `post.test.ts`

## コード構造

### 関数

- 単一責任の原則に従い、1つの関数は1つのタスクに集中する
- 長い関数は小さなヘルパー関数に分割する
- 関数の引数は明示的な型を持たせる
- 戻り値の型も明示的に定義する
- 純粋関数を優先し、副作用を最小限に抑える

### コメント

- 全ての公開関数にJSDocコメントを付ける
- パラメータと戻り値の説明を含める
- 複雑なロジックには適切なコメントを追加
- コメント例:
  ```typescript
  /**
   * 検索パラメータに基づいてデータをフィルタリングする関数
   * @param jsonBody フィルタリング対象のJSONデータ
   * @param searchParams 検索パラメータ
   * @returns フィルタリングされたデータの配列
   */
  ```

### エラーハンドリング

- try/catchで適切にエラーをキャッチする
- エラーメッセージは具体的かつ有用な情報を含める
- 適切なHTTPステータスコードでエラーレスポンスを返す
- コンソールにエラーログを出力する（本番環境ではログレベルを考慮）

## テスト

- 各APIエンドポイントに対する単体テストを作成
- テスト関数名は「should〜」の形式で何をテストするかを明確にする
- テストは独立して実行できるようにする
- 共通のテスト関数や型定義を活用する

## その他のベストプラクティス

- ハードコードされた値の代わりに定数を使用する
- 副作用を持つ処理（ファイル操作など）は明確に分離する
- インポートは整理して、関連するものをグループ化する
- 複雑な条件文は変数や関数に抽出して可読性を高める
- ネストの深いコードは避け、早期リターンを活用する

